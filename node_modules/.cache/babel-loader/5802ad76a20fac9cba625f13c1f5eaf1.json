{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/viktoriialeseiko/Desktop/netflix-clone-project/src/screens/PlansScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nfunction PlansScreen() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n  useEffect(() => {\n    db.collection(\"customers\").doc(user.uid).collection(\"subscriptions\").get().then(querySnapshot => {\n      querySnapshot.forEach(async subscription => {\n        setSubscription({\n          role: subscription.data().role,\n          current_period_end: subscription.data().current_period_end.seconds,\n          current_period_start: subscription.data().current_period_start.seconds\n        });\n      });\n    });\n  }, [user.uid]);\n  useEffect(() => {\n    db.collection(\"products\").where(\"active\", \"==\", true).get().then(querySnapshot => {\n      const products = {};\n      querySnapshot.forEach(async productDoc => {\n        products[productDoc.id] = productDoc.data();\n        const priceSnap = await productDoc.ref.collection(\"prices\").get();\n        priceSnap.docs.forEach(price => {\n          products[productDoc.id].prices = {\n            priceId: price.id,\n            priceData: price.data()\n          };\n        });\n      });\n      setProducts(products);\n    });\n  }, []);\n  console.log(products);\n  console.log(subscription);\n\n  const loadCheckout = async priceId => {\n    const docRef = await db.collection(\"customers\").doc(user.uid).collection(\"checkout_sessions\").add({\n      price: priceId,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin\n    });\n    docRef.onSnapshot(async snap => {\n      const {\n        error,\n        sessionId\n      } = snap.data();\n\n      if (error) {\n        // Show an error to your customer and\n        // inspect your Cloud Function logs in the Firebase console.\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        // We have a session, let's redirect to Checkout\n        // Init Stripe\n        const stripe = await loadStripe(\"pk_test_51IHY5bGxTMskvQrGCC0gRGHoiphdjCAqSM92Nt453P9E4jevxDyczNtZ3eLHo2JQs5UecOzyche1jXaBArRMrIzT00FL6I5P1G\");\n        stripe.redirectToCheckout({\n          sessionId\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plansScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), subscription && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Renewal date:\", \" \", new Date((subscription === null || subscription === void 0 ? void 0 : subscription.current_period_end) * 1000).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), Object.entries(products).map(([productId, productData]) => {\n      var _productData$name;\n\n      // TODO: add some logic to check if the user's subscription is active...\n      const isCurrentPackage = (_productData$name = productData.name) === null || _productData$name === void 0 ? void 0 : _productData$name.toLowerCase().includes(subscription === null || subscription === void 0 ? void 0 : subscription.role);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${isCurrentPackage && \"plansScreen__plan--disabled\"} plansScreen__plan`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plansScreen__info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: productData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: productData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => !isCurrentPackage && loadCheckout(productData.prices.priceId),\n          children: isCurrentPackage ? \"Current Package\" : \"Subscribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlansScreen, \"60ANDhvF363l9RFtL6pi3jSO424=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlansScreen;\nexport default PlansScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlansScreen\");","map":{"version":3,"sources":["/Users/viktoriialeseiko/Desktop/netflix-clone-project/src/screens/PlansScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","loadStripe","PlansScreen","products","setProducts","user","subscription","setSubscription","collection","doc","uid","get","then","querySnapshot","forEach","role","data","current_period_end","seconds","current_period_start","where","productDoc","id","priceSnap","ref","docs","price","prices","priceId","priceData","console","log","loadCheckout","docRef","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","stripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","map","productId","productData","isCurrentPackage","name","toLowerCase","includes","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nfunction PlansScreen() {\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    db.collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"subscriptions\")\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach(async (subscription) => {\n          setSubscription({\n            role: subscription.data().role,\n            current_period_end: subscription.data().current_period_end.seconds,\n            current_period_start: subscription.data().current_period_start\n              .seconds,\n          });\n        });\n      });\n  }, [user.uid]);\n\n  useEffect(() => {\n    db.collection(\"products\")\n      .where(\"active\", \"==\", true)\n      .get()\n      .then((querySnapshot) => {\n        const products = {};\n        querySnapshot.forEach(async (productDoc) => {\n          products[productDoc.id] = productDoc.data();\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\n          priceSnap.docs.forEach((price) => {\n            products[productDoc.id].prices = {\n              priceId: price.id,\n              priceData: price.data(),\n            };\n          });\n        });\n        setProducts(products);\n      });\n  }, []);\n\n  console.log(products);\n  console.log(subscription);\n\n  const loadCheckout = async (priceId) => {\n    const docRef = await db\n      .collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n        price: priceId,\n        success_url: window.location.origin,\n        cancel_url: window.location.origin,\n      });\n\n    docRef.onSnapshot(async (snap) => {\n      const { error, sessionId } = snap.data();\n\n      if (error) {\n        // Show an error to your customer and\n        // inspect your Cloud Function logs in the Firebase console.\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        // We have a session, let's redirect to Checkout\n        // Init Stripe\n\n        const stripe = await loadStripe(\n          \"pk_test_51IHY5bGxTMskvQrGCC0gRGHoiphdjCAqSM92Nt453P9E4jevxDyczNtZ3eLHo2JQs5UecOzyche1jXaBArRMrIzT00FL6I5P1G\"\n        );\n        stripe.redirectToCheckout({ sessionId });\n      }\n    });\n  };\n\n  return (\n    <div className=\"plansScreen\">\n      <br />\n      {subscription && (\n        <p>\n          Renewal date:{\" \"}\n          {new Date(\n            subscription?.current_period_end * 1000\n          ).toLocaleDateString()}\n        </p>\n      )}\n      {Object.entries(products).map(([productId, productData]) => {\n        // TODO: add some logic to check if the user's subscription is active...\n        const isCurrentPackage = productData.name\n          ?.toLowerCase()\n          .includes(subscription?.role);\n\n        return (\n          <div\n            key={productId}\n            className={`${\n              isCurrentPackage && \"plansScreen__plan--disabled\"\n            } plansScreen__plan`}\n          >\n            <div className=\"plansScreen__info\">\n              <h5>{productData.name}</h5>\n              <h6>{productData.description}</h6>\n            </div>\n\n            <button\n              onClick={() =>\n                !isCurrentPackage && loadCheckout(productData.prices.priceId)\n              }\n            >\n              {isCurrentPackage ? \"Current Package\" : \"Subscribe\"}\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PlansScreen;\n"]},"metadata":{},"sourceType":"module"}